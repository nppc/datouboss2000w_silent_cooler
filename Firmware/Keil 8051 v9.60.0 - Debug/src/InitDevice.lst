C51 COMPILER V9.60.0.0   INITDEVICE                                                        06/24/2024 22:58:16 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE INITDEVICE
OBJECT MODULE PLACED IN .\src\InitDevice.OBJ
COMPILER INVOKED BY: C:\SiliconLabs\SimplicityStudio\v5_3\developer\toolchains\keil_8051\9.60\BIN\C51.exe C:\src\Tennp\G
                    -it\datouboss2000w_silent_cooler\Firmware\src\InitDevice.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOAT
                    -FUZZY(3) OPTIMIZE(8,SPEED) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\src\Tennp\Git\datouboss2000w_silent_cooler\Firmware\in
                    -c;C:/SiliconLabs/SimplicityStudio/v5_3/developer/sdks/8051/v4.2.3//Device/shared/si8051Base;C:/SiliconLabs/SimplicityStu
                    -dio/v5_3/developer/sdks/8051/v4.2.3//Device/EFM8BB2/inc) PRINT(.\src\InitDevice.lst) COND PAGEWIDTH(120) PAGELENGTH(65) 
                    -OBJECT(.\src\InitDevice.OBJ)

line level    source

   1          //=========================================================
   2          // src/InitDevice.c: generated by Hardware Configurator
   3          //
   4          // This file will be regenerated when saving a document.
   5          // leave the sections inside the "$[...]" comment tags alone
   6          // or they will be overwritten!
   7          //=========================================================
   8          
   9          // USER INCLUDES
  10          #include <SI_EFM8BB2_Register_Enums.h>
  11          #include "InitDevice.h"
  12          
  13          // USER PROTOTYPES
  14          // USER FUNCTIONS
  15          
  16          // $[Library Includes]
  17          // [Library Includes]$
  18          
  19          //==============================================================================
  20          // enter_DefaultMode_from_RESET
  21          //==============================================================================
  22          extern void
  23          enter_DefaultMode_from_RESET (void)
  24          {
  25   1        // $[Config Calls]
  26   1        // Save the SFRPAGE
  27   1        uint8_t SFRPAGE_save = SFRPAGE;
  28   1        WDT_0_enter_DefaultMode_from_RESET ();
  29   1        VREG_0_enter_DefaultMode_from_RESET ();
  30   1        PORTS_0_enter_DefaultMode_from_RESET ();
  31   1        PORTS_1_enter_DefaultMode_from_RESET ();
  32   1        PBCFG_0_enter_DefaultMode_from_RESET ();
  33   1        ADC_0_enter_DefaultMode_from_RESET ();
  34   1        VREF_0_enter_DefaultMode_from_RESET ();
  35   1        CLOCK_0_enter_DefaultMode_from_RESET ();
  36   1        TIMER16_3_enter_DefaultMode_from_RESET ();
  37   1        TIMER16_4_enter_DefaultMode_from_RESET ();
  38   1        TIMER_SETUP_0_enter_DefaultMode_from_RESET ();
  39   1        PCA_0_enter_DefaultMode_from_RESET ();
  40   1        PCACH_0_enter_DefaultMode_from_RESET ();
  41   1        PCACH_1_enter_DefaultMode_from_RESET ();
  42   1        INTERRUPT_0_enter_DefaultMode_from_RESET ();
  43   1        // Restore the SFRPAGE
  44   1        SFRPAGE = SFRPAGE_save;
  45   1        // [Config Calls]$
  46   1      
  47   1      }
  48          
  49          //================================================================================
  50          // WDT_0_enter_DefaultMode_from_RESET
  51          //================================================================================
C51 COMPILER V9.60.0.0   INITDEVICE                                                        06/24/2024 22:58:16 PAGE 2   

  52          extern void
  53          WDT_0_enter_DefaultMode_from_RESET (void)
  54          {
  55   1        // $[Watchdog Timer Init Variable Declarations]
  56   1        uint32_t i;
  57   1        bool ea;
  58   1        // [Watchdog Timer Init Variable Declarations]$
  59   1      
  60   1        // $[WDTCN - Watchdog Timer Control]
  61   1        // Deprecated
  62   1        // [WDTCN - Watchdog Timer Control]$
  63   1      
  64   1        // $[WDTCN_2 - Watchdog Timer Control]
  65   1        SFRPAGE = 0x00;
  66   1      
  67   1        // Feed WDT timer before disabling (Erratum WDT_E102)
  68   1        WDTCN = 0xA5;
  69   1      
  70   1        // Add 2 LFO cycle delay before disabling WDT (Erratum WDT_E102)
  71   1        for (i = 0; i < (2 * 3062500UL) / (80000 * 3); i++)
  72   1          {
  73   2            NOP ();
  74   2          }
  75   1      
  76   1        // Disable WDT
  77   1        ea = IE_EA;
  78   1        IE_EA = 0;
  79   1        WDTCN = 0xDE;
  80   1        WDTCN = 0xAD;
  81   1        IE_EA = ea;
  82   1      
  83   1        // [WDTCN_2 - Watchdog Timer Control]$
  84   1      
  85   1      }
  86          
  87          //================================================================================
  88          // PORTS_0_enter_DefaultMode_from_RESET
  89          //================================================================================
  90          extern void
  91          PORTS_0_enter_DefaultMode_from_RESET (void)
  92          {
  93   1        // $[P0 - Port 0 Pin Latch]
  94   1        // [P0 - Port 0 Pin Latch]$
  95   1      
  96   1        // $[P0MDOUT - Port 0 Output Mode]
  97   1        // [P0MDOUT - Port 0 Output Mode]$
  98   1      
  99   1        // $[P0MDIN - Port 0 Input Mode]
 100   1        // [P0MDIN - Port 0 Input Mode]$
 101   1      
 102   1        // $[P0SKIP - Port 0 Skip]
 103   1        /***********************************************************************
 104   1         - P0.0 pin is skipped by the crossbar
 105   1         - P0.1 pin is skipped by the crossbar
 106   1         - P0.2 pin is skipped by the crossbar
 107   1         - P0.3 pin is skipped by the crossbar
 108   1         - P0.4 pin is skipped by the crossbar
 109   1         - P0.5 pin is skipped by the crossbar
 110   1         - P0.6 pin is skipped by the crossbar
 111   1         - P0.7 pin is skipped by the crossbar
 112   1         ***********************************************************************/
 113   1        SFRPAGE = 0x00;
 114   1        P0SKIP = P0SKIP_B0__SKIPPED | P0SKIP_B1__SKIPPED | P0SKIP_B2__SKIPPED
C51 COMPILER V9.60.0.0   INITDEVICE                                                        06/24/2024 22:58:16 PAGE 3   

 115   1            | P0SKIP_B3__SKIPPED | P0SKIP_B4__SKIPPED | P0SKIP_B5__SKIPPED
 116   1            | P0SKIP_B6__SKIPPED | P0SKIP_B7__SKIPPED;
 117   1        // [P0SKIP - Port 0 Skip]$
 118   1      
 119   1        // $[P0MASK - Port 0 Mask]
 120   1        // [P0MASK - Port 0 Mask]$
 121   1      
 122   1        // $[P0MAT - Port 0 Match]
 123   1        // [P0MAT - Port 0 Match]$
 124   1      
 125   1      }
 126          
 127          //================================================================================
 128          // PORTS_1_enter_DefaultMode_from_RESET
 129          //================================================================================
 130          extern void
 131          PORTS_1_enter_DefaultMode_from_RESET (void)
 132          {
 133   1        // $[P1 - Port 1 Pin Latch]
 134   1        /***********************************************************************
 135   1         - P1.0 is high. Set P1.0 to drive or float high
 136   1         - P1.1 is high. Set P1.1 to drive or float high
 137   1         - P1.2 is low. Set P1.2 to drive low
 138   1         - P1.3 is high. Set P1.3 to drive or float high
 139   1         - P1.4 is low. Set P1.4 to drive low
 140   1         - P1.5 is high. Set P1.5 to drive or float high
 141   1         - P1.6 is high. Set P1.6 to drive or float high
 142   1         ***********************************************************************/
 143   1        P1 = P1_B0__HIGH | P1_B1__HIGH | P1_B2__LOW | P1_B3__HIGH | P1_B4__LOW
 144   1            | P1_B5__HIGH | P1_B6__HIGH;
 145   1        // [P1 - Port 1 Pin Latch]$
 146   1      
 147   1        // $[P1MDOUT - Port 1 Output Mode]
 148   1        /***********************************************************************
 149   1         - P1.0 output is open-drain
 150   1         - P1.1 output is open-drain
 151   1         - P1.2 output is push-pull
 152   1         - P1.3 output is open-drain
 153   1         - P1.4 output is push-pull
 154   1         - P1.5 output is open-drain
 155   1         - P1.6 output is open-drain
 156   1         ***********************************************************************/
 157   1        P1MDOUT = P1MDOUT_B0__OPEN_DRAIN | P1MDOUT_B1__OPEN_DRAIN
 158   1            | P1MDOUT_B2__PUSH_PULL | P1MDOUT_B3__OPEN_DRAIN | P1MDOUT_B4__PUSH_PULL
 159   1            | P1MDOUT_B5__OPEN_DRAIN | P1MDOUT_B6__OPEN_DRAIN;
 160   1        // [P1MDOUT - Port 1 Output Mode]$
 161   1      
 162   1        // $[P1MDIN - Port 1 Input Mode]
 163   1        // [P1MDIN - Port 1 Input Mode]$
 164   1      
 165   1        // $[P1SKIP - Port 1 Skip]
 166   1        /***********************************************************************
 167   1         - P1.0 pin is skipped by the crossbar
 168   1         - P1.1 pin is skipped by the crossbar
 169   1         - P1.2 pin is not skipped by the crossbar
 170   1         - P1.3 pin is skipped by the crossbar
 171   1         - P1.4 pin is not skipped by the crossbar
 172   1         - P1.5 pin is not skipped by the crossbar
 173   1         - P1.6 pin is not skipped by the crossbar
 174   1         ***********************************************************************/
 175   1        P1SKIP = P1SKIP_B0__SKIPPED | P1SKIP_B1__SKIPPED | P1SKIP_B2__NOT_SKIPPED
 176   1            | P1SKIP_B3__SKIPPED | P1SKIP_B4__NOT_SKIPPED | P1SKIP_B5__NOT_SKIPPED
 177   1            | P1SKIP_B6__NOT_SKIPPED;
C51 COMPILER V9.60.0.0   INITDEVICE                                                        06/24/2024 22:58:16 PAGE 4   

 178   1        // [P1SKIP - Port 1 Skip]$
 179   1      
 180   1        // $[P1MASK - Port 1 Mask]
 181   1        // [P1MASK - Port 1 Mask]$
 182   1      
 183   1        // $[P1MAT - Port 1 Match]
 184   1        // [P1MAT - Port 1 Match]$
 185   1      
 186   1      }
 187          
 188          //================================================================================
 189          // PBCFG_0_enter_DefaultMode_from_RESET
 190          //================================================================================
 191          extern void
 192          PBCFG_0_enter_DefaultMode_from_RESET (void)
 193          {
 194   1        // $[XBR2 - Port I/O Crossbar 2]
 195   1        /***********************************************************************
 196   1         - Weak Pullups enabled 
 197   1         - Crossbar enabled
 198   1         - UART1 I/O unavailable at Port pin
 199   1         - UART1 RTS1 unavailable at Port pin
 200   1         - UART1 CTS1 unavailable at Port pin
 201   1         ***********************************************************************/
 202   1        XBR2 = XBR2_WEAKPUD__PULL_UPS_ENABLED | XBR2_XBARE__ENABLED
 203   1            | XBR2_URT1E__DISABLED | XBR2_URT1RTSE__DISABLED
 204   1            | XBR2_URT1CTSE__DISABLED;
 205   1        // [XBR2 - Port I/O Crossbar 2]$
 206   1      
 207   1        // $[PRTDRV - Port Drive Strength]
 208   1        // [PRTDRV - Port Drive Strength]$
 209   1      
 210   1        // $[XBR0 - Port I/O Crossbar 0]
 211   1        // [XBR0 - Port I/O Crossbar 0]$
 212   1      
 213   1        // $[XBR1 - Port I/O Crossbar 1]
 214   1        /***********************************************************************
 215   1         - CEX0, CEX1 routed to Port pins
 216   1         - ECI unavailable at Port pin
 217   1         - T0 unavailable at Port pin
 218   1         - T1 unavailable at Port pin
 219   1         - T2 unavailable at Port pin
 220   1         ***********************************************************************/
 221   1        XBR1 = XBR1_PCA0ME__CEX0_CEX1 | XBR1_ECIE__DISABLED | XBR1_T0E__DISABLED
 222   1            | XBR1_T1E__DISABLED | XBR1_T2E__DISABLED;
 223   1        // [XBR1 - Port I/O Crossbar 1]$
 224   1      
 225   1      }
 226          
 227          //================================================================================
 228          // ADC_0_enter_DefaultMode_from_RESET
 229          //================================================================================
 230          extern void
 231          ADC_0_enter_DefaultMode_from_RESET (void)
 232          {
 233   1        // $[ADC0CN1 - ADC0 Control 1]
 234   1        // [ADC0CN1 - ADC0 Control 1]$
 235   1      
 236   1        // $[ADC0MX - ADC0 Multiplexer Selection]
 237   1        /***********************************************************************
 238   1         - Select ADC0.16
 239   1         ***********************************************************************/
 240   1        ADC0MX = ADC0MX_ADC0MX__TEMP;
C51 COMPILER V9.60.0.0   INITDEVICE                                                        06/24/2024 22:58:16 PAGE 5   

 241   1        // [ADC0MX - ADC0 Multiplexer Selection]$
 242   1      
 243   1        // $[ADC0CF - ADC0 Configuration]
 244   1        /***********************************************************************
 245   1         - SAR Clock Divider = 0x06
 246   1         - ADC0 operates in 10-bit or 12-bit mode 
 247   1         - The on-chip PGA gain is 1
 248   1         - Normal Track Mode
 249   1         ***********************************************************************/
 250   1        ADC0CF = (0x06 << ADC0CF_ADSC__SHIFT) | ADC0CF_AD8BE__NORMAL
 251   1            | ADC0CF_ADGN__GAIN_1 | ADC0CF_ADTM__TRACK_NORMAL;
 252   1        // [ADC0CF - ADC0 Configuration]$
 253   1      
 254   1        // $[ADC0AC - ADC0 Accumulator Configuration]
 255   1        /***********************************************************************
 256   1         - Right justified. No shifting applied
 257   1         - Enable 12-bit mode
 258   1         - ADC0H:ADC0L contain the result of the latest conversion when Burst
 259   1         Mode is disabled
 260   1         - Perform and Accumulate 4 conversions 
 261   1         ***********************************************************************/
 262   1        ADC0AC = ADC0AC_ADSJST__RIGHT_NO_SHIFT | ADC0AC_AD12BE__12_BIT_ENABLED
 263   1            | ADC0AC_ADAE__ACC_DISABLED | ADC0AC_ADRPT__ACC_4;
 264   1        // [ADC0AC - ADC0 Accumulator Configuration]$
 265   1      
 266   1        // $[ADC0TK - ADC0 Burst Mode Track Time]
 267   1        // [ADC0TK - ADC0 Burst Mode Track Time]$
 268   1      
 269   1        // $[ADC0PWR - ADC0 Power Control]
 270   1        /***********************************************************************
 271   1         - Burst Mode Power Up Time = 0x0F
 272   1         - Disable low power mode
 273   1         - Low power mode disabled
 274   1         - Select bias current mode 1 
 275   1         ***********************************************************************/
 276   1        ADC0PWR = (0x0F << ADC0PWR_ADPWR__SHIFT) | ADC0PWR_ADLPM__LP_BUFFER_DISABLED
 277   1            | ADC0PWR_ADMXLP__LP_MUX_VREF_DISABLED | ADC0PWR_ADBIAS__MODE1;
 278   1        // [ADC0PWR - ADC0 Power Control]$
 279   1      
 280   1        // $[ADC0GTH - ADC0 Greater-Than High Byte]
 281   1        // [ADC0GTH - ADC0 Greater-Than High Byte]$
 282   1      
 283   1        // $[ADC0GTL - ADC0 Greater-Than Low Byte]
 284   1        // [ADC0GTL - ADC0 Greater-Than Low Byte]$
 285   1      
 286   1        // $[ADC0LTH - ADC0 Less-Than High Byte]
 287   1        // [ADC0LTH - ADC0 Less-Than High Byte]$
 288   1      
 289   1        // $[ADC0LTL - ADC0 Less-Than Low Byte]
 290   1        // [ADC0LTL - ADC0 Less-Than Low Byte]$
 291   1      
 292   1        // $[ADC0CN0 - ADC0 Control 0]
 293   1        /***********************************************************************
 294   1         - Enable ADC0 
 295   1         - Enable ADC0 burst mode
 296   1         ***********************************************************************/
 297   1        ADC0CN0 |= ADC0CN0_ADEN__ENABLED | ADC0CN0_ADBMEN__BURST_ENABLED;
 298   1        // [ADC0CN0 - ADC0 Control 0]$
 299   1      
 300   1      }
 301          
 302          //================================================================================
 303          // VREF_0_enter_DefaultMode_from_RESET
C51 COMPILER V9.60.0.0   INITDEVICE                                                        06/24/2024 22:58:16 PAGE 6   

 304          //================================================================================
 305          extern void
 306          VREF_0_enter_DefaultMode_from_RESET (void)
 307          {
 308   1        // $[REF0CN - Voltage Reference Control]
 309   1        /***********************************************************************
 310   1         - Enable the Temperature Sensor
 311   1         - The ADC0 ground reference is the GND pin
 312   1         - The internal reference operates at 1.65 V nominal
 313   1         - The ADC0 voltage reference is the internal voltage reference
 314   1         ***********************************************************************/
 315   1        REF0CN = REF0CN_TEMPE__TEMP_ENABLED | REF0CN_GNDSL__GND_PIN
 316   1            | REF0CN_IREFLVL__1P65 | REF0CN_REFSL__INTERNAL_VREF;
 317   1        // [REF0CN - Voltage Reference Control]$
 318   1      
 319   1      }
 320          
 321          //================================================================================
 322          // LFOSC_0_enter_DefaultMode_from_RESET
 323          //================================================================================
 324          extern void
 325          LFOSC_0_enter_DefaultMode_from_RESET (void)
 326          {
 327   1        // $[LFO0CN - Low Frequency Oscillator Control]
 328   1        /***********************************************************************
 329   1         - Internal L-F Oscillator Enabled
 330   1         ***********************************************************************/
 331   1        LFO0CN |= LFO0CN_OSCLEN__ENABLED;
 332   1        // [LFO0CN - Low Frequency Oscillator Control]$
 333   1      
 334   1        // $[Wait for LFOSC Ready]
 335   1        while ((LFO0CN & LFO0CN_OSCLRDY__BMASK) != LFO0CN_OSCLRDY__SET)
 336   1          ;
 337   1        // [Wait for LFOSC Ready]$
 338   1      
 339   1      }
 340          
 341          //================================================================================
 342          // CLOCK_0_enter_DefaultMode_from_RESET
 343          //================================================================================
 344          extern void
 345          CLOCK_0_enter_DefaultMode_from_RESET (void)
 346          {
 347   1        // $[HFOSC1 Setup]
 348   1        // [HFOSC1 Setup]$
 349   1      
 350   1        // $[CLKSEL - Clock Select]
 351   1        /***********************************************************************
 352   1         - Clock derived from the Internal High Frequency Oscillator 0
 353   1         - SYSCLK is equal to selected clock source divided by 4
 354   1         ***********************************************************************/
 355   1        CLKSEL = CLKSEL_CLKSL__HFOSC0 | CLKSEL_CLKDIV__SYSCLK_DIV_4;
 356   1        while ((CLKSEL & CLKSEL_DIVRDY__BMASK) == CLKSEL_DIVRDY__NOT_READY)
 357   1          ;
 358   1        // [CLKSEL - Clock Select]$
 359   1      
 360   1      }
 361          
 362          //================================================================================
 363          // TIMER16_2_enter_DefaultMode_from_RESET
 364          //================================================================================
 365          extern void
 366          TIMER16_2_enter_DefaultMode_from_RESET (void)
C51 COMPILER V9.60.0.0   INITDEVICE                                                        06/24/2024 22:58:16 PAGE 7   

 367          {
 368   1        // $[Timer Initialization]
 369   1        // Save Timer Configuration
 370   1        uint8_t TMR2CN0_TR2_save;
 371   1        TMR2CN0_TR2_save = TMR2CN0 & TMR2CN0_TR2__BMASK;
 372   1        // Stop Timer
 373   1        TMR2CN0 &= ~(TMR2CN0_TR2__BMASK);
 374   1        // [Timer Initialization]$
 375   1      
 376   1        // $[TMR2CN1 - Timer 2 Control 1]
 377   1        // [TMR2CN1 - Timer 2 Control 1]$
 378   1      
 379   1        // $[TMR2CN0 - Timer 2 Control]
 380   1        // [TMR2CN0 - Timer 2 Control]$
 381   1      
 382   1        // $[TMR2H - Timer 2 High Byte]
 383   1        // [TMR2H - Timer 2 High Byte]$
 384   1      
 385   1        // $[TMR2L - Timer 2 Low Byte]
 386   1        // [TMR2L - Timer 2 Low Byte]$
 387   1      
 388   1        // $[TMR2RLH - Timer 2 Reload High Byte]
 389   1        /***********************************************************************
 390   1         - Timer 2 Reload High Byte = 0xFE
 391   1         ***********************************************************************/
 392   1        TMR2RLH = (0xFE << TMR2RLH_TMR2RLH__SHIFT);
 393   1        // [TMR2RLH - Timer 2 Reload High Byte]$
 394   1      
 395   1        // $[TMR2RLL - Timer 2 Reload Low Byte]
 396   1        /***********************************************************************
 397   1         - Timer 2 Reload Low Byte = 0x02
 398   1         ***********************************************************************/
 399   1        TMR2RLL = (0x02 << TMR2RLL_TMR2RLL__SHIFT);
 400   1        // [TMR2RLL - Timer 2 Reload Low Byte]$
 401   1      
 402   1        // $[TMR2CN0]
 403   1        /***********************************************************************
 404   1         - Start Timer 2 running
 405   1         ***********************************************************************/
 406   1        TMR2CN0 |= TMR2CN0_TR2__RUN;
 407   1        // [TMR2CN0]$
 408   1      
 409   1        // $[Timer Restoration]
 410   1        // Restore Timer Configuration
 411   1        TMR2CN0 |= TMR2CN0_TR2_save;
 412   1        // [Timer Restoration]$
 413   1      
 414   1      }
 415          
 416          //================================================================================
 417          // TIMER_SETUP_0_enter_DefaultMode_from_RESET
 418          //================================================================================
 419          extern void
 420          TIMER_SETUP_0_enter_DefaultMode_from_RESET (void)
 421          {
 422   1        // $[CKCON0 - Clock Control 0]
 423   1        /***********************************************************************
 424   1         - System clock divided by 12
 425   1         - Counter/Timer 0 uses the clock defined by the prescale field, SCA
 426   1         - Timer 2 high byte uses the clock defined by T2XCLK in TMR2CN0
 427   1         - Timer 2 low byte uses the clock defined by T2XCLK in TMR2CN0
 428   1         - Timer 3 high byte uses the clock defined by T3XCLK in TMR3CN0
 429   1         - Timer 3 low byte uses the system clock
C51 COMPILER V9.60.0.0   INITDEVICE                                                        06/24/2024 22:58:16 PAGE 8   

 430   1         - Timer 1 uses the clock defined by the prescale field, SCA
 431   1         ***********************************************************************/
 432   1        SFRPAGE = 0x00;
 433   1        CKCON0 = CKCON0_SCA__SYSCLK_DIV_12 | CKCON0_T0M__PRESCALE
 434   1            | CKCON0_T2MH__EXTERNAL_CLOCK | CKCON0_T2ML__EXTERNAL_CLOCK
 435   1            | CKCON0_T3MH__EXTERNAL_CLOCK | CKCON0_T3ML__SYSCLK
 436   1            | CKCON0_T1M__PRESCALE;
 437   1        // [CKCON0 - Clock Control 0]$
 438   1      
 439   1        // $[CKCON1 - Clock Control 1]
 440   1        // [CKCON1 - Clock Control 1]$
 441   1      
 442   1        // $[TMOD - Timer 0/1 Mode]
 443   1        // [TMOD - Timer 0/1 Mode]$
 444   1      
 445   1        // $[TCON - Timer 0/1 Control]
 446   1        // [TCON - Timer 0/1 Control]$
 447   1      
 448   1      }
 449          
 450          //================================================================================
 451          // PCA_0_enter_DefaultMode_from_RESET
 452          //================================================================================
 453          extern void
 454          PCA_0_enter_DefaultMode_from_RESET (void)
 455          {
 456   1        // $[PCA Off]
 457   1        PCA0CN0_CR = PCA0CN0_CR__STOP;
 458   1        // [PCA Off]$
 459   1      
 460   1        // $[PCA0MD - PCA Mode]
 461   1        /***********************************************************************
 462   1         - PCA continues to function normally while the system controller is in
 463   1         Idle Mode
 464   1         - Disable the CF interrupt
 465   1         - System clock
 466   1         ***********************************************************************/
 467   1        PCA0MD = PCA0MD_CIDL__NORMAL | PCA0MD_ECF__OVF_INT_DISABLED
 468   1            | PCA0MD_CPS__SYSCLK;
 469   1        // [PCA0MD - PCA Mode]$
 470   1      
 471   1        // $[PCA0CENT - PCA Center Alignment Enable]
 472   1        // [PCA0CENT - PCA Center Alignment Enable]$
 473   1      
 474   1        // $[PCA0CLR - PCA Comparator Clear Control]
 475   1        // [PCA0CLR - PCA Comparator Clear Control]$
 476   1      
 477   1        // $[PCA0L - PCA Counter/Timer Low Byte]
 478   1        // [PCA0L - PCA Counter/Timer Low Byte]$
 479   1      
 480   1        // $[PCA0H - PCA Counter/Timer High Byte]
 481   1        // [PCA0H - PCA Counter/Timer High Byte]$
 482   1      
 483   1        // $[PCA0POL - PCA Output Polarity]
 484   1        // [PCA0POL - PCA Output Polarity]$
 485   1      
 486   1        // $[PCA0PWM - PCA PWM Configuration]
 487   1        // [PCA0PWM - PCA PWM Configuration]$
 488   1      
 489   1        // $[PCA On]
 490   1        PCA0CN0_CR = PCA0CN0_CR__RUN;
 491   1        // [PCA On]$
 492   1      
C51 COMPILER V9.60.0.0   INITDEVICE                                                        06/24/2024 22:58:16 PAGE 9   

 493   1      }
 494          
 495          //================================================================================
 496          // PCACH_0_enter_DefaultMode_from_RESET
 497          //================================================================================
 498          extern void
 499          PCACH_0_enter_DefaultMode_from_RESET (void)
 500          {
 501   1        // $[PCA0 Settings Save]
 502   1        // Select Capture/Compare register)
 503   1        PCA0PWM &= ~PCA0PWM_ARSEL__BMASK;
 504   1        // [PCA0 Settings Save]$
 505   1      
 506   1        // $[PCA0CPM0 - PCA Channel 0 Capture/Compare Mode]
 507   1        /***********************************************************************
 508   1         - Disable negative edge capture
 509   1         - Disable CCF0 interrupts
 510   1         - Disable match function
 511   1         - 8 to 11-bit PWM selected
 512   1         - Disable positive edge capture
 513   1         - Disable comparator function
 514   1         - Enable PWM function
 515   1         - Disable toggle function
 516   1         ***********************************************************************/
 517   1        PCA0CPM0 = PCA0CPM0_CAPN__DISABLED | PCA0CPM0_ECCF__DISABLED
 518   1            | PCA0CPM0_MAT__DISABLED | PCA0CPM0_PWM16__8_BIT | PCA0CPM0_CAPP__DISABLED
 519   1            | PCA0CPM0_ECOM__DISABLED | PCA0CPM0_PWM__ENABLED
 520   1            | PCA0CPM0_TOG__DISABLED;
 521   1        // [PCA0CPM0 - PCA Channel 0 Capture/Compare Mode]$
 522   1      
 523   1        // $[PCA0CPL0 - PCA Channel 0 Capture Module Low Byte]
 524   1        /***********************************************************************
 525   1         - PCA Channel 0 Capture Module Low Byte = 0xC8
 526   1         ***********************************************************************/
 527   1        PCA0CPL0 = (0xC8 << PCA0CPL0_PCA0CPL0__SHIFT);
 528   1        // [PCA0CPL0 - PCA Channel 0 Capture Module Low Byte]$
 529   1      
 530   1        // $[PCA0CPH0 - PCA Channel 0 Capture Module High Byte]
 531   1        /***********************************************************************
 532   1         - PCA Channel 0 Capture Module High Byte = 0xC8
 533   1         ***********************************************************************/
 534   1        PCA0CPH0 = (0xC8 << PCA0CPH0_PCA0CPH0__SHIFT);
 535   1        // [PCA0CPH0 - PCA Channel 0 Capture Module High Byte]$
 536   1      
 537   1        // $[Auto-reload]
 538   1        // [Auto-reload]$
 539   1      
 540   1        // $[PCA0 Settings Restore]
 541   1        // [PCA0 Settings Restore]$
 542   1      
 543   1      }
 544          
 545          //================================================================================
 546          // PCACH_1_enter_DefaultMode_from_RESET
 547          //================================================================================
 548          extern void
 549          PCACH_1_enter_DefaultMode_from_RESET (void)
 550          {
 551   1        // $[PCA0 Settings Save]
 552   1        // Select Capture/Compare register)
 553   1        PCA0PWM &= ~PCA0PWM_ARSEL__BMASK;
 554   1        // [PCA0 Settings Save]$
 555   1      
C51 COMPILER V9.60.0.0   INITDEVICE                                                        06/24/2024 22:58:16 PAGE 10  

 556   1        // $[PCA0CPM1 - PCA Channel 1 Capture/Compare Mode]
 557   1        /***********************************************************************
 558   1         - Disable negative edge capture
 559   1         - Disable CCF1 interrupts
 560   1         - Disable match function
 561   1         - 8 to 11-bit PWM selected
 562   1         - Disable positive edge capture
 563   1         - Enable comparator function
 564   1         - Enable PWM function
 565   1         - Disable toggle function
 566   1         ***********************************************************************/
 567   1        PCA0CPM1 = PCA0CPM1_CAPN__DISABLED | PCA0CPM1_ECCF__DISABLED
 568   1            | PCA0CPM1_MAT__DISABLED | PCA0CPM1_PWM16__8_BIT | PCA0CPM1_CAPP__DISABLED
 569   1            | PCA0CPM1_ECOM__ENABLED | PCA0CPM1_PWM__ENABLED | PCA0CPM1_TOG__DISABLED;
 570   1        // [PCA0CPM1 - PCA Channel 1 Capture/Compare Mode]$
 571   1      
 572   1        // $[PCA0CPL1 - PCA Channel 1 Capture Module Low Byte]
 573   1        /***********************************************************************
 574   1         - PCA Channel 1 Capture Module Low Byte = 0xC8
 575   1         ***********************************************************************/
 576   1        PCA0CPL1 = (0xC8 << PCA0CPL1_PCA0CPL1__SHIFT);
 577   1        // [PCA0CPL1 - PCA Channel 1 Capture Module Low Byte]$
 578   1      
 579   1        // $[PCA0CPH1 - PCA Channel 1 Capture Module High Byte]
 580   1        /***********************************************************************
 581   1         - PCA Channel 1 Capture Module High Byte = 0xC8
 582   1         ***********************************************************************/
 583   1        PCA0CPH1 = (0xC8 << PCA0CPH1_PCA0CPH1__SHIFT);
 584   1        // [PCA0CPH1 - PCA Channel 1 Capture Module High Byte]$
 585   1      
 586   1        // $[Auto-reload]
 587   1        // [Auto-reload]$
 588   1      
 589   1        // $[PCA0 Settings Restore]
 590   1        // [PCA0 Settings Restore]$
 591   1      
 592   1      }
 593          
 594          //================================================================================
 595          // INTERRUPT_0_enter_DefaultMode_from_RESET
 596          //================================================================================
 597          extern void
 598          INTERRUPT_0_enter_DefaultMode_from_RESET (void)
 599          {
 600   1        // $[EIE1 - Extended Interrupt Enable 1]
 601   1        // [EIE1 - Extended Interrupt Enable 1]$
 602   1      
 603   1        // $[EIE2 - Extended Interrupt Enable 2]
 604   1        /***********************************************************************
 605   1         - Disable all I2C0 slave interrupts
 606   1         - Enable interrupt requests generated by the TF4L or TF4H flags
 607   1         - Disable UART1 interrupts
 608   1         ***********************************************************************/
 609   1        SFRPAGE = 0x10;
 610   1        EIE2 = EIE2_EI2C0__DISABLED | EIE2_ET4__ENABLED | EIE2_ES1__DISABLED;
 611   1        // [EIE2 - Extended Interrupt Enable 2]$
 612   1      
 613   1        // $[EIP1H - Extended Interrupt Priority 1 High]
 614   1        // [EIP1H - Extended Interrupt Priority 1 High]$
 615   1      
 616   1        // $[EIP1 - Extended Interrupt Priority 1 Low]
 617   1        // [EIP1 - Extended Interrupt Priority 1 Low]$
 618   1      
C51 COMPILER V9.60.0.0   INITDEVICE                                                        06/24/2024 22:58:16 PAGE 11  

 619   1        // $[EIP2 - Extended Interrupt Priority 2]
 620   1        // [EIP2 - Extended Interrupt Priority 2]$
 621   1      
 622   1        // $[EIP2H - Extended Interrupt Priority 2 High]
 623   1        // [EIP2H - Extended Interrupt Priority 2 High]$
 624   1      
 625   1        // $[IE - Interrupt Enable]
 626   1        /***********************************************************************
 627   1         - Enable each interrupt according to its individual mask setting
 628   1         - Disable external interrupt 0
 629   1         - Disable external interrupt 1
 630   1         - Disable all SPI0 interrupts
 631   1         - Disable all Timer 0 interrupt
 632   1         - Disable all Timer 1 interrupt
 633   1         - Disable Timer 2 interrupt
 634   1         - Disable UART0 interrupt
 635   1         ***********************************************************************/
 636   1        SFRPAGE = 0x00;
 637   1        IE = IE_EA__ENABLED | IE_EX0__DISABLED | IE_EX1__DISABLED | IE_ESPI0__DISABLED
 638   1            | IE_ET0__DISABLED | IE_ET1__DISABLED | IE_ET2__DISABLED
 639   1            | IE_ES0__DISABLED;
 640   1        // [IE - Interrupt Enable]$
 641   1      
 642   1        // $[IP - Interrupt Priority]
 643   1        // [IP - Interrupt Priority]$
 644   1      
 645   1        // $[IPH - Interrupt Priority High]
 646   1        // [IPH - Interrupt Priority High]$
 647   1      
 648   1      }
 649          
 650          extern void
 651          CIP51_0_enter_DefaultMode_from_RESET (void)
 652          {
 653   1        // $[PFE0CN - Prefetch Engine Control]
 654   1        /***********************************************************************
 655   1         - Enable the prefetch engine 
 656   1         - SYSCLK < 50 MHz
 657   1         ***********************************************************************/
 658   1        SFRPAGE = 0x10;
 659   1        PFE0CN = PFE0CN_PFEN__ENABLED | PFE0CN_FLRT__SYSCLK_BELOW_50_MHZ;
 660   1        // [PFE0CN - Prefetch Engine Control]$
 661   1      
 662   1      }
 663          
 664          extern void
 665          VREG_0_enter_DefaultMode_from_RESET (void)
 666          {
 667   1        // $[REG0CN - Voltage Regulator 0 Control]
 668   1        // [REG0CN - Voltage Regulator 0 Control]$
 669   1      
 670   1        // $[REG1CN - Voltage Regulator 1 Control]
 671   1        /***********************************************************************
 672   1         - Regulator is disabled
 673   1         - Regulator bias is disabled
 674   1         - The 5V regulator is in normal power mode
 675   1         ***********************************************************************/
 676   1        SFRPAGE = 0x20;
 677   1        REG1CN = REG1CN_REG1ENB__DISABLED | REG1CN_BIASENB__DISABLED
 678   1            | REG1CN_SUSEN__NORMAL;
 679   1        // [REG1CN - Voltage Regulator 1 Control]$
 680   1      
 681   1      }
C51 COMPILER V9.60.0.0   INITDEVICE                                                        06/24/2024 22:58:16 PAGE 12  

 682          
 683          extern void
 684          TIMER16_3_enter_DefaultMode_from_RESET (void)
 685          {
 686   1        // $[Timer Initialization]
 687   1        // Save Timer Configuration
 688   1        uint8_t TMR3CN0_TR3_save;
 689   1        TMR3CN0_TR3_save = TMR3CN0 & TMR3CN0_TR3__BMASK;
 690   1        // Stop Timer
 691   1        TMR3CN0 &= ~(TMR3CN0_TR3__BMASK);
 692   1        // [Timer Initialization]$
 693   1      
 694   1        // $[TMR3CN1 - Timer 3 Control 1]
 695   1        // [TMR3CN1 - Timer 3 Control 1]$
 696   1      
 697   1        // $[TMR3CN0 - Timer 3 Control]
 698   1        // [TMR3CN0 - Timer 3 Control]$
 699   1      
 700   1        // $[TMR3H - Timer 3 High Byte]
 701   1        // [TMR3H - Timer 3 High Byte]$
 702   1      
 703   1        // $[TMR3L - Timer 3 Low Byte]
 704   1        // [TMR3L - Timer 3 Low Byte]$
 705   1      
 706   1        // $[TMR3RLH - Timer 3 Reload High Byte]
 707   1        /***********************************************************************
 708   1         - Timer 3 Reload High Byte = 0xE8
 709   1         ***********************************************************************/
 710   1        TMR3RLH = (0xE8 << TMR3RLH_TMR3RLH__SHIFT);
 711   1        // [TMR3RLH - Timer 3 Reload High Byte]$
 712   1      
 713   1        // $[TMR3RLL - Timer 3 Reload Low Byte]
 714   1        /***********************************************************************
 715   1         - Timer 3 Reload Low Byte = 0x13
 716   1         ***********************************************************************/
 717   1        TMR3RLL = (0x13 << TMR3RLL_TMR3RLL__SHIFT);
 718   1        // [TMR3RLL - Timer 3 Reload Low Byte]$
 719   1      
 720   1        // $[TMR3CN0]
 721   1        /***********************************************************************
 722   1         - Start Timer 3 running
 723   1         ***********************************************************************/
 724   1        TMR3CN0 |= TMR3CN0_TR3__RUN;
 725   1        // [TMR3CN0]$
 726   1      
 727   1        // $[Timer Restoration]
 728   1        // Restore Timer Configuration
 729   1        TMR3CN0 |= TMR3CN0_TR3_save;
 730   1        // [Timer Restoration]$
 731   1      
 732   1      }
 733          
 734          extern void
 735          TIMER16_4_enter_DefaultMode_from_RESET (void)
 736          {
 737   1        // $[Timer Initialization]
 738   1        // Save Timer Configuration
 739   1        uint8_t TMR4CN0_TR4_save;
 740   1        SFRPAGE = 0x10;
 741   1        TMR4CN0_TR4_save = TMR4CN0 & TMR4CN0_TR4__BMASK;
 742   1        // Stop Timer
 743   1        TMR4CN0 &= ~(TMR4CN0_TR4__BMASK);
 744   1        // [Timer Initialization]$
C51 COMPILER V9.60.0.0   INITDEVICE                                                        06/24/2024 22:58:16 PAGE 13  

 745   1      
 746   1        // $[TMR4CN1 - Timer 4 Control 1]
 747   1        // [TMR4CN1 - Timer 4 Control 1]$
 748   1      
 749   1        // $[TMR4CN0 - Timer 4 Control]
 750   1        /***********************************************************************
 751   1         - Timer 4 clock is the external oscillator divided by 8 
 752   1         ***********************************************************************/
 753   1        TMR4CN0 &= ~TMR4CN0_T4XCLK__FMASK;
 754   1        TMR4CN0 |= TMR4CN0_T4XCLK__TIMER3;
 755   1        // [TMR4CN0 - Timer 4 Control]$
 756   1      
 757   1        // $[TMR4H - Timer 4 High Byte]
 758   1        /***********************************************************************
 759   1         - Timer 4 High Byte = 0xFF
 760   1         ***********************************************************************/
 761   1        TMR4H = (0xFF << TMR4H_TMR4H__SHIFT);
 762   1        // [TMR4H - Timer 4 High Byte]$
 763   1      
 764   1        // $[TMR4L - Timer 4 Low Byte]
 765   1        /***********************************************************************
 766   1         - Timer 4 Low Byte = 0xFF
 767   1         ***********************************************************************/
 768   1        TMR4L = (0xFF << TMR4L_TMR4L__SHIFT);
 769   1        // [TMR4L - Timer 4 Low Byte]$
 770   1      
 771   1        // $[TMR4RLH - Timer 4 Reload High Byte]
 772   1        /***********************************************************************
 773   1         - Timer 4 Reload High Byte = 0xFC
 774   1         ***********************************************************************/
 775   1        TMR4RLH = (0xFC << TMR4RLH_TMR4RLH__SHIFT);
 776   1        // [TMR4RLH - Timer 4 Reload High Byte]$
 777   1      
 778   1        // $[TMR4RLL - Timer 4 Reload Low Byte]
 779   1        /***********************************************************************
 780   1         - Timer 4 Reload Low Byte = 0x18
 781   1         ***********************************************************************/
 782   1        TMR4RLL = (0x18 << TMR4RLL_TMR4RLL__SHIFT);
 783   1        // [TMR4RLL - Timer 4 Reload Low Byte]$
 784   1      
 785   1        // $[TMR4CN0]
 786   1        /***********************************************************************
 787   1         - Start Timer 4 running
 788   1         ***********************************************************************/
 789   1        TMR4CN0 |= TMR4CN0_TR4__RUN;
 790   1        // [TMR4CN0]$
 791   1      
 792   1        // $[Timer Restoration]
 793   1        // Restore Timer Configuration
 794   1        TMR4CN0 |= TMR4CN0_TR4_save;
 795   1        // [Timer Restoration]$
 796   1      
 797   1      }
 798          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    333    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       5
   IDATA SIZE       =   ----    ----
C51 COMPILER V9.60.0.0   INITDEVICE                                                        06/24/2024 22:58:16 PAGE 14  

   BIT SIZE         =   ----       1
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
